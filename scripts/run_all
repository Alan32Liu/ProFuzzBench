#!/usr/bin/env sh

ONLY_LEGION=$1  # 0: Both AFLNet and AFLNet_Legion; 1: Just AFLNet_Legion
PRE_RESULTS=$2  # Previous csv results (e.g. AFLNet) to reuse
TIME_MINUTE=$3  # Experiment time in minutes
SUBJECT=$4      # Experiment target
RESULT_DIR=$(date +"%Y-%m-%d_%H%M%S")  # Where to save experiment results

# TODO: define the params here, make them cmd line params
# Convert the minute to seconds
TIME_SECONDS=$((TIME_MINUTE * 60))

# Confirm the directory to save results
echo "Results directory: ${RESULT_DIR}"

## Fuzing options
#if [ "${SUBJECT}" = "lightftp" ]; then
#  AFLNET_OPTIONS='"-P FTP -D 10000 -q 3 -s 3 -E -K -c ./ftpclean.sh"'
#  LEGION_OPTIONS='"-P FTP -D 10000 -q 4 -s 4 -E -K -c ./ftpclean.sh"'
#elif  [ "${SUBJECT}" = "proftpd" ]; then
#  AFLNET_OPTIONS="-t 1000+ -m none -P FTP -D 10000 -q 3 -s 3 -E -K -c clean"
#  LEGION_OPTIONS="-t 1000+ -m none -P FTP -D 10000 -q 4 -s 4 -E -K -c clean"
#elif  [ "${SUBJECT}" = "openssl" ]; then
#  AFLNET_OPTIONS='"-P TLS -D 10000 -q 3 -s 3 -E -K -R -W 100"'
#  LEGION_OPTIONS='"-P TLS -D 10000 -q 4 -s 4 -E -K -R -W 100"'
#elif  [ "${SUBJECT}" = "openssh" ]; then
#  AFLNET_OPTIONS='"-P SSH -D 10000 -q 3 -s 3 -E -K -W 10"'
#  LEGION_OPTIONS='"-P SSH -D 10000 -q 4 -s 4 -E -K -W 10"'
#else
#  echo "Invalid subject: ${SUBJECT}"
#  exit 1
#fi

# Make sure the result folder exists
mkdir -p "${RESULT_DIR}"

# Run fuzzing
## Confirm the experiment duration
echo "Fuzzing time: ${TIME_SECONDS} seconds"
if [ "${ONLY_LEGION}" -eq "0" ]; then
  if [ "${SUBJECT}" = "lightftp" ]; then
    profuzzbench_exec_common.sh donggeliu/"${SUBJECT}" 4 "${RESULT_DIR}" aflnet out-"${SUBJECT}"-aflnet "-P FTP -D 10000 -q 3 -s 3 -E -K -c ./ftpclean.sh" "${TIME_SECONDS}" 5 &
    profuzzbench_exec_common.sh donggeliu/"${SUBJECT}" 4 "${RESULT_DIR}" aflnet_legion out-"${SUBJECT}"-aflnet_legion "-l 0 -p 5 -a -z -r 1.414 -P FTP -D 10000 -q 4 -s 4 -E -K -c ./ftpclean.sh" "${TIME_SECONDS}" 5 &
    wait
  elif [ "${SUBJECT}" = "proftpd" ]; then
    profuzzbench_exec_common.sh donggeliu/"${SUBJECT}" 4 "${RESULT_DIR}" aflnet out-"${SUBJECT}"-aflnet "-t 1000+ -m none -P FTP -D 10000 -q 3 -s 3 -E -K -c clean" "${TIME_SECONDS}" 5 &
    profuzzbench_exec_common.sh donggeliu/"${SUBJECT}" 4 "${RESULT_DIR}" aflnet_legion out-"${SUBJECT}"-aflnet_legion "-l 0 -p 5 -a -z -r 1.414 -t 1000+ -m none -P FTP -D 10000 -q 4 -s 4 -E -K -c clean" "${TIME_SECONDS}" 5 &
    wait
  elif [ "${SUBJECT}" = "openssl" ]; then
    profuzzbench_exec_common.sh donggeliu/"${SUBJECT}" 4 "${RESULT_DIR}" aflnet out-"${SUBJECT}"-aflnet "-P TLS -D 10000 -q 3 -s 3 -E -K -R -W 100" "${TIME_SECONDS}" 5 &
    profuzzbench_exec_common.sh donggeliu/"${SUBJECT}" 4 "${RESULT_DIR}" aflnet_legion out-"${SUBJECT}"-aflnet_legion "-l 0 -p 5 -a -z -r 1.414 -P TLS -D 10000 -q 4 -s 4 -E -K -R -W 100" "${TIME_SECONDS}" 5 &
    wait
  elif [ "${SUBJECT}" = "openssh" ]; then
    profuzzbench_exec_common.sh donggeliu/"${SUBJECT}" 4 "${RESULT_DIR}" aflnet out-"${SUBJECT}"-aflnet "-P SSH -D 10000 -q 3 -s 3 -E -K -W 10" "${TIME_SECONDS}" 5 &
    profuzzbench_exec_common.sh donggeliu/"${SUBJECT}" 4 "${RESULT_DIR}" aflnet_legion out-"${SUBJECT}"-aflnet_legion "-l 0 -p 5 -a -z -r 1.414 -P SSH -D 10000 -q 4 -s 4 -E -K -W 10" "${TIME_SECONDS}" 5 &
    wait
  else
    echo "Invalid subject: ${SUBJECT}"
    exit 1
  fi
  #TODO: Try some minimum examples
#  echo "profuzzbench_exec_common.sh donggeliu/${SUBJECT} 4 ${RESULT_DIR} aflnet out-${SUBJECT}-aflnet ${AFLNET_OPTIONS} ${TIME_SECONDS} 5"
#  profuzzbench_exec_common.sh donggeliu/"${SUBJECT}" 4 "${RESULT_DIR}" aflnet out-"${SUBJECT}"-aflnet ${AFLNET_OPTIONS} "${TIME_SECONDS}" 5 &
  #profuzzbench_exec_common.sh donggeliu/"${SUBJECT}" 4 "${RESULT_DIR}" aflnet_legion out-"${SUBJECT}"-aflnet_legion "${LEGION_OPTIONS}" "${TIME_SECONDS}" 5 &
  #wait
else
  # profuzzbench_exec_common.sh donggeliu/"${SUBJECT}" 4 "${RESULT_DIR}" aflnet_legion out-"${SUBJECT}"-aflnet_legion ${AFLNET_OPTIONS} "${TIME_SECONDS}" 5
  if [ "${SUBJECT}" = "lightftp" ]; then
    profuzzbench_exec_common.sh donggeliu/"${SUBJECT}" 4 "${RESULT_DIR}" aflnet_legion out-"${SUBJECT}"-aflnet_legion "-l 0 -p 5 -a -z -r 1.414 -P FTP -D 10000 -q 4 -s 4 -E -K -c ./ftpclean.sh" "${TIME_SECONDS}" 5
  elif [ "${SUBJECT}" = "proftpd" ]; then
    profuzzbench_exec_common.sh donggeliu/"${SUBJECT}" 4 "${RESULT_DIR}" aflnet_legion out-"${SUBJECT}"-aflnet_legion "-l 0 -p 5 -a -z -r 1.414 -t 1000+ -m none -P FTP -D 10000 -q 4 -s 4 -E -K -c clean" "${TIME_SECONDS}" 5
  elif [ "${SUBJECT}" = "openssl" ]; then
    profuzzbench_exec_common.sh donggeliu/"${SUBJECT}" 4 "${RESULT_DIR}" aflnet_legion out-"${SUBJECT}"-aflnet_legion "-l 0 -p 5 -a -z -r 1.414 -P TLS -D 10000 -q 4 -s 4 -E -K -R -W 100" "${TIME_SECONDS}" 5
  elif [ "${SUBJECT}" = "openssh" ]; then
    profuzzbench_exec_common.sh donggeliu/"${SUBJECT}" 4 "${RESULT_DIR}" aflnet_legion out-"${SUBJECT}"-aflnet_legion "-l 0 -p 5 -a -z -r 1.414 -P SSH -D 10000 -q 4 -s 4 -E -K -W 10" "${TIME_SECONDS}" 5
  else
    echo "Invalid subject: ${SUBJECT}"
    exit 1
  fi
fi

# Collect the results
(
  cd "${RESULT_DIR}" || exit
  if [ "${ONLY_LEGION}" -eq "1" ]; then
    cp "../${PRE_RESULTS}/results.csv" .
  else
    profuzzbench_generate_csv.sh "${SUBJECT}" 4 aflnet results.csv 0 
  fi
  profuzzbench_generate_csv.sh "${SUBJECT}" 4 aflnet_legion results.csv 1 
)


# Collect the results
(
  cd "${RESULT_DIR}" || exit
  echo "Plotting time: ${TIME_MINUTE} minutes"
  profuzzbench_plot.py -i results.csv -p "${SUBJECT}" -r 4 -c "${TIME_MINUTE}" -s 1 -o cov_over_time.png
)

